{
  "Define a GraphQL resource and CRUD operations on it": {
    "prefix": "graphcrudnode",
    "body": [
      "import { builder } from '../builder';",
      "import { prisma } from '../prisma';",
      "import { DateTimeScalar } from './scalars';",
      "",
      "export const $1Type = builder.prismaNode('$1', {",
      "\tid: { field: 'id' },",
      "\tfields: (t) => ({",
      "\t\tcreatedAt: t.expose('createdAt', { type: DateTimeScalar }),",
      "\t\tupdatedAt: t.expose('updatedAt', { type: DateTimeScalar }),",
      "\t\t$0",
      "\t}),",
      "});",
      "",
      "builder.queryField('$2s', (t) =>",
      "\tt.prismaConnection({",
      "\t\ttype: $1Type,",
      "\t\tcursor: 'id',",
      "\t\tasync authScopes(_, { }, { user }) {",
      "\t\t\t// todo",
      "\t\t},",
      "\t\tasync resolve(query, _, { }, { user }) {",
      "\t\t\treturn prisma.$2.findMany({",
      "\t\t\t\t...query,",
      "\t\t\t\torderBy: { updatedAt: 'desc' },",
      "\t\t\t});",
      "\t\t},",
      "\t})",
      ");",
      "",
      "builder.queryField('$2', (t) =>",
      "\tt.prismaField({",
      "\t\ttype: $1Type,",
      "\t\targs: {",
      "\t\t\tid: t.arg.id(),",
      "\t\t},",
      "\t\tasync authScopes(_, { id }, { user }) {",
      "\t\t\t// todo",
      "\t\t},",
      "\t\tasync resolve(query, _, { id }, { user }) {",
      "\t\t\treturn prisma.$2.findUnique({",
      "\t\t\t\t...query,",
      "\t\t\t\twhere: { id },",
      "\t\t\t});",
      "\t\t},",
      "\t})",
      ");",
      "",
      "builder.mutationField('upsert$1', (t) =>",
      "\tt.prismaField({",
      "\t\ttype: $1Type,",
      "\t\targs: {",
      "\t\t\tid: t.arg.id({ required: false }),",
      "\t\t\t// todo",
      "\t\t},",
      "\t\tasync authScopes(_, { id }, { user }) {",
      "\t\t\t// todo",
      "\t\t},",
      "\t\tasync resolve(query, _, { id }, { user }) {",
      "\t\t\tconst upsertData = {",
      "\t\t\t\t// todo",
      "\t\t\t};",
      "\t\t\treturn prisma.$2.upsert({",
      "\t\t\t\t...query,",
      "\t\t\t\twhere: { id: id ?? '' },",
      "\t\t\t\tcreate: upsertData,",
      "\t\t\t\tupdate: upsertData,",
      "\t\t\t});",
      "\t\t},",
      "\t})",
      ");",
      "",
      "builder.mutationField('delete$1', (t) =>",
      "\tt.prismaField({",
      "\t\ttype: 'Boolean',",
      "\t\targs: {",
      "\t\t\tid: t.arg.id(),",
      "\t\t},",
      "\t\tasync authScopes(_, { id }, { user }) {",
      "\t\t\t// todo",
      "\t\t},",
      "\t\tasync resolve(_query, _, { id }, { user }) {",
      "\t\t\tawait prisma.$2.delete({",
      "\t\t\t\twhere: { id },",
      "\t\t\t});",
      "\t\t\treturn true;",
      "\t\t},",
      "\t})",
      ");"
    ]
  }
}

#!/usr/bin/env bash

if ! command -v jq &> /dev/null; then
    echo "Please install jq to use this script: https://stedolan.github.io/jq/"
    exit 1
fi

if [ "$(pwd)" != "$(git rev-parse --show-toplevel)/packages/api" ]; then
    echo "Please run this script from packages/api"
    exit 1
fi

jq < barrelsby.config.json ".directory = []" | sponge barrelsby.config.json

for dir in src/{lib,permissions,modules/*/*}; do
    if [ ! -d "$dir" ]; then
        continue
    fi
    if [ -z "$(ls -A "$dir")" ]; then
	continue
    fi
    jq < barrelsby.config.json ".directory = .directory + [\"./$dir\"]" | sponge barrelsby.config.json
done

echo Updated barrelsby.config.json

# modules/index.ts needs to be manually generated because import order matters to pothos, and alphabetical import order results in resolvers/index.js being imported *before* types/index.js, thus preventing Pothos from building the schema

declare -a generated_modules_names=()

for module in src/modules/*; do
    if [ ! -d "$module" ]; then
        continue
    fi
    module_name=$(basename "$module")
    cat <<-'EOF' > "$module/index.ts"
	/**
	 * @file generated by packages/api/scripts/generate-barrelsby-config.bash
	 * The order of imports matters to Pothos, so we need to hardcode the import order,
	 * barrelsby cannot do this, so we do it ourselves with a little bash scripting.
	 */

	// organize-imports-ignore
EOF
    
	if [ ! -z "$(ls -A "$module/types")" ]; then
		echo "export * from './types/index.js';" >> "$module/index.ts"
	fi

	if [ ! -z "$(ls -A "$module/resolvers")" ]; then
		echo "export * from './resolvers/index.js';" >> "$module/index.ts"
	fi

    echo "" >> "$module/index.ts"
    # the rest can be imported by a glob
    for dir in src/modules/$module_name/*; do
        if [ ! -d "$dir" ]; then
            continue
        fi
		if [ -z "$(ls -A "$dir")" ]; then
			continue
		fi
        dir_name=$(basename "$dir")
        if [ "$dir_name" = "resolvers" ] || [ "$dir_name" = "types" ]; then
            continue
        fi
        echo "export * from './$dir_name/index.js';" >> "$module/index.ts"
    done
	# don't forget the final newline :)
	echo >> "$module/index.ts"
    generated_modules_names+=("$module_name")
done

printf "Generated index.ts for modules"

for module in "${generated_modules_names[@]}"; do
    printf " $module"
done
printf "\n"
